#!/usr/bin/env python
#
# takes a treelist of all trees that we want to form pathes among them
#
import sys
import os

import pathtrees.pathtrees as pt
import pathtrees.likelihood as like
import pathtrees.phylip as ph
import pathtrees.tree as tree

import numpy as np
import time
#import shutil

GTPTREELIST = 'gtptreelist' # a pair of trees formed from the master treelist
GTPTERMINALLIST = 'terminal_output_gtp'  #GTP terminal output
NUMPATHTREES = 10  #number of trees in path
GTP = 'pathtrees/gtp'

def create_treepair(ti,tj):
    f = open(GTPTREELIST,'w')
    f.write(ti.strip())
    f.write("\n")
    f.write(tj.strip())
    f.write('\n')

def run_gtp(gtptreelist,gtpterminallist):
    os.system(f"cd  {GTP}; java -jar gtp.jar -v ../../{gtptreelist} > ../../{gtpterminallist}")
    
def masterpathtrees(treelist): #this is the master treelist
    # loop over treelist:
    allpathtrees = []
    for i,ti in enumerate(treelist):
        for j,tj in enumerate(treelist):
            if j>=i:
                continue
            #form a treelist of the pair
            create_treepair(ti,tj) #this writes into a file GTPTREELIST
            print("run gtp")
            run_gtp(GTPTREELIST, GTPTERMINALLIST)
            mypathtrees = pt.pathtrees(GTPTREELIST, GTPTERMINALLIST, NUMPATHTREES)
            print("LOOP",i,j)
            allpathtrees.extend(mypathtrees)
            #save or manipulate your pathtrees
    return [a.strip() for a in allpathtrees]

def likelihoods(trees,sequences):
    likelihood_values=[]
    for i,newtree in enumerate(trees):
        t = tree.Tree()
        t.myread(newtree,t.root)
        t.insertSequence(t.root,labels,sequences)
        
        #setup mutation model
        # the default for tree is JukesCantor,
        # so these two steps are not really necessary
        Q, basefreqs = like.JukesCantor()
        t.setParameters(Q,basefreqs)
        #calculate likelihood and return it
        t.likelihood()
        likelihood_values.append(t.lnL)
    return likelihood_values

def store_results(outputdir,filename,the_list):
    completename = os. path. join(outputdir, filename)
    np.savetxt (completename, the_list,  fmt='%s')

if __name__ == "__main__":
    #DEBUG = True
    import argparse
    parser = argparse.ArgumentParser(description='Create a geodesic path between all trees in the treelist')
    parser.add_argument('STARTTREES', 
                        help='mandatory input file that holds a set of trees in Newick format')
    parser.add_argument('DATAFILE', 
                        help='mandatory input file that holds a sequence data set in PHYLIP format')
    parser.add_argument('-o','--output', dest='outputdir', #action='store_const',
                        #const='outputdir',
                        default='pathtree_outputdir',
                        help='directory that holds the output files')
    parser.add_argument('-v','--verbose', action='store_const',
                        default=None,const='keep_intermediate',
                        help='Do not remove the intermediate files generated by GPT')

    args = parser.parse_args()
    start_trees = args.STARTTREES
    datafile = args.DATAFILE
    outputdir = args.outputdir
    keep = args.verbose != None
    os.system(f'mkdir -p {outputdir}')
    #print(args)
    #print(args.verbose,keep)

    tic = time.perf_counter()
    with open(start_trees,'r') as f:
        StartTrees = [line.strip() for line in f]
    Pathtrees = masterpathtrees(StartTrees)
    labels, sequences = ph.readData(datafile)
    Treelist= StartTrees+Pathtrees
    #Treelist = [s.replace('\n', '') for s in trees]
    Likelihoods = likelihoods(Treelist,sequences)
    
    store_results(outputdir,'likelihood',Likelihoods)
    store_results(outputdir,'treelist',Treelist)
    store_results(outputdir,'starttrees',StartTrees)
    store_results(outputdir,'pathtrees',Pathtrees)
    
    toc = time.perf_counter()
    time1 = toc - tic
    #print(50*"=")
    print(f"\nTime of generating pathtrees results = {time1}")

    tic2 = time.perf_counter()
    #if DEBUG:
    run_gtp('treelist', GTPTERMINALLIST)
    os.system(f'mv gtp/output.txt {outputdir}')
    if not keep:
        os.system(f'rm {GTPTERMINALLIST}')
        os.system(f'rm {GTPTREELIST}')
    toc2 = time.perf_counter()
    time2 = toc2 - tic2
    print(f"Time of GTP distances of all trees = {time2}")

